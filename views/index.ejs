<!DOCTYPE html>
<html lang="en">
    <link rel="stylesheet" href="css/patternfly.css" type="text/css">
    <link rel="stylesheet" href="css/patternfly-addons.css" type="text/css">
    <link rel="stylesheet" href="css/chart.css" type="text/css">   
<head>
  
</head>
<body class="container">

    <header class="pf-c-masthead" id="basic-masthead">
        <span class="pf-c-masthead__toggle">
        </span>
        <div class="pf-c-masthead__main">
          <h2></h2>
          <a class="pf-c-masthead__brand" href="#"></a>
        </div>
        <%= locals.hostname %>
        <div class="pf-c-masthead__content">
          <span>Address: <%= locals.address %>|</span>
          <span>| User: <%= locals.whoami %></span>
        </div>
      </header>

<main>
  <div class="dashboard">
    <div class="charts">
    <canvas id="storage"></canvas>
    <span></span>
    <canvas id="storage2"></canvas>
  </div>

</main> 

<footer>
    <span></span>
    <p type="text" class="uptime"><%= locals.uptime %></p>
</footer>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>

  // This is where you are gonna feed in your data  
  let storage = '<%= locals.storage %>' 
  let storagetotal = '<%= locals.storagetotal %>'

  let yValues = [storage, storagetotal];

  let barColors = ["lightBlue", "navy"];
  let xValues = ["Used", "Total"];
  
  new Chart("storage", {
    type: "doughnut",
    data: {
      labels: xValues,
      datasets: [{
        backgroundColor: barColors,
        data: yValues
      }],
    },
    options: {
    plugins: {
      legend: {
        position: 'right',
      },
      title: {
        display: false,
      }
    }
    }
  });
  </script> 
  
  <script>

    // This is where you are gonna feed in your data
    let yValues2 = [345, 924];
  
    let barColors2 = ["lightBlue", "navy"];
    let xValues2 = ["var1", "var2"];
    
    new Chart("storage2", {
      type: "doughnut",
      data: {
        labels: xValues2,
        datasets: [{
          backgroundColor: barColors2,
          data: yValues2
        }],
      },
      options: {
      plugins: {
        legend: {
          position: 'right',
        },
        title: {
          display: false,
        }
      }
      }
    });
    </script> 
    

<script >

// use Sockets they say...

async function uptime() {
  let response = await fetch("http://localhost:3000/uptime", 
  {
    method: "GET",
    mode: "cors",
  },
  ).then(response => response.json()).then(data => 
  {
    document.querySelector("p").innerHTML = data.uptime;    
  });
} 
setInterval(uptime, 1000) 
</script>

</body>
</html
